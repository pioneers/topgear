/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package fearing;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class base_cmd implements lcm.lcm.LCMEncodable
{
    public fearing.header header;
    public float left_cmd;
    public float right_cmd;
 
    public base_cmd()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7ee86aabcdd7137cL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(fearing.base_cmd.class))
            return 0L;
 
        classes.add(fearing.base_cmd.class);
        long hash = LCM_FINGERPRINT_BASE
             + fearing.header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        outs.writeFloat(this.left_cmd); 
 
        outs.writeFloat(this.right_cmd); 
 
    }
 
    public base_cmd(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public base_cmd(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static fearing.base_cmd _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        fearing.base_cmd o = new fearing.base_cmd();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = fearing.header._decodeRecursiveFactory(ins);
 
        this.left_cmd = ins.readFloat();
 
        this.right_cmd = ins.readFloat();
 
    }
 
    public fearing.base_cmd copy()
    {
        fearing.base_cmd outobj = new fearing.base_cmd();
        outobj.header = this.header.copy();
 
        outobj.left_cmd = this.left_cmd;
 
        outobj.right_cmd = this.right_cmd;
 
        return outobj;
    }
 
}

