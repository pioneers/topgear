"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import header

class linux_state(object):
    __slots__ = ["header", "uptime", "load_average", "cpu_use", "memory_use", "temp"]

    def __init__(self):
        self.header = None
        self.uptime = 0
        self.load_average = [ 0.0 for dim0 in range(3) ]
        self.cpu_use = [ 0.0 for dim0 in range(4) ]
        self.memory_use = 0
        self.temp = 0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(linux_state._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == header.header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">q", self.uptime))
        buf.write(struct.pack('>3f', *self.load_average[:3]))
        buf.write(struct.pack('>4f', *self.cpu_use[:4]))
        buf.write(struct.pack(">qi", self.memory_use, self.temp))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != linux_state._get_packed_fingerprint():
            raise ValueError("Decode error")
        return linux_state._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = linux_state()
        self.header = header.header._decode_one(buf)
        self.uptime = struct.unpack(">q", buf.read(8))[0]
        self.load_average = struct.unpack('>3f', buf.read(12))
        self.cpu_use = struct.unpack('>4f', buf.read(16))
        self.memory_use, self.temp = struct.unpack(">qi", buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if linux_state in parents: return 0
        newparents = parents + [linux_state]
        tmphash = (0x88f16ab1e1ccd937+ header.header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if linux_state._packed_fingerprint is None:
            linux_state._packed_fingerprint = struct.pack(">Q", linux_state._get_hash_recursive([]))
        return linux_state._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

