"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import header

class base_cmd(object):
    __slots__ = ["header", "left_cmd", "right_cmd"]

    def __init__(self):
        self.header = None
        self.left_cmd = 0.0
        self.right_cmd = 0.0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(base_cmd._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == header.header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ff", self.left_cmd, self.right_cmd))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != base_cmd._get_packed_fingerprint():
            raise ValueError("Decode error")
        return base_cmd._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = base_cmd()
        self.header = header.header._decode_one(buf)
        self.left_cmd, self.right_cmd = struct.unpack(">ff", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if base_cmd in parents: return 0
        newparents = parents + [base_cmd]
        tmphash = (0x7ee86aabcdd7137c+ header.header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if base_cmd._packed_fingerprint is None:
            base_cmd._packed_fingerprint = struct.pack(">Q", base_cmd._get_hash_recursive([]))
        return base_cmd._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

