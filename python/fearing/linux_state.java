/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package fearing;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class linux_state implements lcm.lcm.LCMEncodable
{
    public fearing.header header;
    public long uptime;
    public float load_average[];
    public float cpu_use[];
    public long memory_use;
    public int temp;
 
    public linux_state()
    {
        load_average = new float[3];
        cpu_use = new float[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x88f16ab1e1ccd937L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(fearing.linux_state.class))
            return 0L;
 
        classes.add(fearing.linux_state.class);
        long hash = LCM_FINGERPRINT_BASE
             + fearing.header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        outs.writeLong(this.uptime); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.load_average[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.cpu_use[a]); 
        }
 
        outs.writeLong(this.memory_use); 
 
        outs.writeInt(this.temp); 
 
    }
 
    public linux_state(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public linux_state(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static fearing.linux_state _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        fearing.linux_state o = new fearing.linux_state();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = fearing.header._decodeRecursiveFactory(ins);
 
        this.uptime = ins.readLong();
 
        this.load_average = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.load_average[a] = ins.readFloat();
        }
 
        this.cpu_use = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.cpu_use[a] = ins.readFloat();
        }
 
        this.memory_use = ins.readLong();
 
        this.temp = ins.readInt();
 
    }
 
    public fearing.linux_state copy()
    {
        fearing.linux_state outobj = new fearing.linux_state();
        outobj.header = this.header.copy();
 
        outobj.uptime = this.uptime;
 
        outobj.load_average = new float[(int) 3];
        System.arraycopy(this.load_average, 0, outobj.load_average, 0, 3); 
        outobj.cpu_use = new float[(int) 4];
        System.arraycopy(this.cpu_use, 0, outobj.cpu_use, 0, 4); 
        outobj.memory_use = this.memory_use;
 
        outobj.temp = this.temp;
 
        return outobj;
    }
 
}

