/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package forseti2;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class xbox_joystick_state implements lcm.lcm.LCMEncodable
{
    public forseti2.header header;
    public float axes[];
    public boolean buttons[];
 
    public xbox_joystick_state()
    {
        axes = new float[6];
        buttons = new boolean[11];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xde0322355bddf3cbL;
 
    public static final byte A = (byte) 0;
    public static final byte B = (byte) 1;
    public static final byte X = (byte) 2;
    public static final byte Y = (byte) 3;
    public static final byte LB = (byte) 4;
    public static final byte RB = (byte) 5;
    public static final byte BACK = (byte) 6;
    public static final byte START = (byte) 7;
    public static final byte GUIDE = (byte) 8;
    public static final byte LSTICK = (byte) 9;
    public static final byte RSTICK = (byte) 10;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(forseti2.xbox_joystick_state.class))
            return 0L;
 
        classes.add(forseti2.xbox_joystick_state.class);
        long hash = LCM_FINGERPRINT_BASE
             + forseti2.header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.axes[a]); 
        }
 
        for (int a = 0; a < 11; a++) {
            outs.writeByte( this.buttons[a] ? 1 : 0); 
        }
 
    }
 
    public xbox_joystick_state(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public xbox_joystick_state(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static forseti2.xbox_joystick_state _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        forseti2.xbox_joystick_state o = new forseti2.xbox_joystick_state();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = forseti2.header._decodeRecursiveFactory(ins);
 
        this.axes = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.axes[a] = ins.readFloat();
        }
 
        this.buttons = new boolean[(int) 11];
        for (int a = 0; a < 11; a++) {
            this.buttons[a] = ins.readByte()!=0;
        }
 
    }
 
    public forseti2.xbox_joystick_state copy()
    {
        forseti2.xbox_joystick_state outobj = new forseti2.xbox_joystick_state();
        outobj.header = this.header.copy();
 
        outobj.axes = new float[(int) 6];
        System.arraycopy(this.axes, 0, outobj.axes, 0, 6); 
        outobj.buttons = new boolean[(int) 11];
        System.arraycopy(this.buttons, 0, outobj.buttons, 0, 11); 
        return outobj;
    }
 
}

