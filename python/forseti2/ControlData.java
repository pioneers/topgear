/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package forseti2;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ControlData implements lcm.lcm.LCMEncodable
{
    public boolean TeleopEnabled;
    public boolean HaltRadio;
    public boolean AutonomousEnabled;
    public boolean RobotEnabled;
    public String Stage;
    public int Time;
 
    public ControlData()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xaad705cbe00f114aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(forseti2.ControlData.class))
            return 0L;
 
        classes.add(forseti2.ControlData.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeByte( this.TeleopEnabled ? 1 : 0); 
 
        outs.writeByte( this.HaltRadio ? 1 : 0); 
 
        outs.writeByte( this.AutonomousEnabled ? 1 : 0); 
 
        outs.writeByte( this.RobotEnabled ? 1 : 0); 
 
        __strbuf = new char[this.Stage.length()]; this.Stage.getChars(0, this.Stage.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.Time); 
 
    }
 
    public ControlData(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ControlData(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static forseti2.ControlData _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        forseti2.ControlData o = new forseti2.ControlData();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.TeleopEnabled = ins.readByte()!=0;
 
        this.HaltRadio = ins.readByte()!=0;
 
        this.AutonomousEnabled = ins.readByte()!=0;
 
        this.RobotEnabled = ins.readByte()!=0;
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.Stage = new String(__strbuf);
 
        this.Time = ins.readInt();
 
    }
 
    public forseti2.ControlData copy()
    {
        forseti2.ControlData outobj = new forseti2.ControlData();
        outobj.TeleopEnabled = this.TeleopEnabled;
 
        outobj.HaltRadio = this.HaltRadio;
 
        outobj.AutonomousEnabled = this.AutonomousEnabled;
 
        outobj.RobotEnabled = this.RobotEnabled;
 
        outobj.Stage = this.Stage;
 
        outobj.Time = this.Time;
 
        return outobj;
    }
 
}

