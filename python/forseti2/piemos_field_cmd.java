/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package forseti2;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class piemos_field_cmd implements lcm.lcm.LCMEncodable
{
    public forseti2.header header;
    public boolean isFlash;
    public boolean isStart;
    public boolean isLeft;
    public long rfid_uid;
 
    public piemos_field_cmd()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x41930ef51bb056baL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(forseti2.piemos_field_cmd.class))
            return 0L;
 
        classes.add(forseti2.piemos_field_cmd.class);
        long hash = LCM_FINGERPRINT_BASE
             + forseti2.header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        outs.writeByte( this.isFlash ? 1 : 0); 
 
        outs.writeByte( this.isStart ? 1 : 0); 
 
        outs.writeByte( this.isLeft ? 1 : 0); 
 
        outs.writeLong(this.rfid_uid); 
 
    }
 
    public piemos_field_cmd(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public piemos_field_cmd(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static forseti2.piemos_field_cmd _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        forseti2.piemos_field_cmd o = new forseti2.piemos_field_cmd();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = forseti2.header._decodeRecursiveFactory(ins);
 
        this.isFlash = ins.readByte()!=0;
 
        this.isStart = ins.readByte()!=0;
 
        this.isLeft = ins.readByte()!=0;
 
        this.rfid_uid = ins.readLong();
 
    }
 
    public forseti2.piemos_field_cmd copy()
    {
        forseti2.piemos_field_cmd outobj = new forseti2.piemos_field_cmd();
        outobj.header = this.header.copy();
 
        outobj.isFlash = this.isFlash;
 
        outobj.isStart = this.isStart;
 
        outobj.isLeft = this.isLeft;
 
        outobj.rfid_uid = this.rfid_uid;
 
        return outobj;
    }
 
}

