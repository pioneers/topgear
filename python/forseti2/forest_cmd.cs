/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace forseti2
{
    public sealed class forest_cmd : LCM.LCM.LCMEncodable
    {
        public forseti2.header header;
        public bool[,] lights;
        public int[] servos;
 
        public forest_cmd()
        {
            lights = new bool[8,3];
            servos = new int[8];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x3a668b0764040a01L;
 
        public const int BRANCH_RED = 0;
        public const int BRANCH_ORANGE = 1;
        public const int BRANCH_GREEN = 2;

        static forest_cmd()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("forseti2.forest_cmd"))
                return 0L;
 
            classes.Add("forseti2.forest_cmd");
            ulong hash = LCM_FINGERPRINT_BASE
                 + forseti2.header._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            for (int a = 0; a < 8; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.lights[a,b]); 
                }
            }
 
            for (int a = 0; a < 8; a++) {
                outs.Write(this.servos[a]); 
            }
 
        }
 
        public forest_cmd(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public forest_cmd(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static forseti2.forest_cmd _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            forseti2.forest_cmd o = new forseti2.forest_cmd();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = forseti2.header._decodeRecursiveFactory(ins);
 
            this.lights = new bool[(int) 8,(int) 3];
            for (int a = 0; a < 8; a++) {
                for (int b = 0; b < 3; b++) {
                    this.lights[a,b] = ins.ReadBoolean();
                }
            }
 
            this.servos = new int[(int) 8];
            for (int a = 0; a < 8; a++) {
                this.servos[a] = ins.ReadInt32();
            }
 
        }
 
        public forseti2.forest_cmd Copy()
        {
            forseti2.forest_cmd outobj = new forseti2.forest_cmd();
            outobj.header = this.header.Copy();
 
            outobj.lights = new bool[(int) 8,(int) 3];
            for (int a = 0; a < 8; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.lights[a,b] = this.lights[a,b];
                }
            }
 
            outobj.servos = new int[(int) 8];
            for (int a = 0; a < 8; a++) {
                outobj.servos[a] = this.servos[a];
            }
 
            return outobj;
        }
    }
}

