"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import header

class xbox_joystick_state(object):
    __slots__ = ["header", "axes", "buttons"]

    A = 0
    B = 1
    X = 2
    Y = 3
    LB = 4
    RB = 5
    BACK = 6
    START = 7
    GUIDE = 8
    LSTICK = 9
    RSTICK = 10

    def __init__(self):
        self.header = None
        self.axes = [ 0.0 for dim0 in range(6) ]
        self.buttons = [ False for dim0 in range(11) ]

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(xbox_joystick_state._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == header.header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack('>6f', *self.axes[:6]))
        buf.write(struct.pack('>11b', *self.buttons[:11]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != xbox_joystick_state._get_packed_fingerprint():
            raise ValueError("Decode error")
        return xbox_joystick_state._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = xbox_joystick_state()
        self.header = header.header._decode_one(buf)
        self.axes = struct.unpack('>6f', buf.read(24))
        self.buttons = struct.unpack('>11b', buf.read(11))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if xbox_joystick_state in parents: return 0
        newparents = parents + [xbox_joystick_state]
        tmphash = (0xde0322355bddf3cb+ header.header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if xbox_joystick_state._packed_fingerprint is None:
            xbox_joystick_state._packed_fingerprint = struct.pack(">Q", xbox_joystick_state._get_hash_recursive([]))
        return xbox_joystick_state._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

