"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import header

class forest_cmd(object):
    __slots__ = ["header", "lights", "servos"]

    BRANCH_RED = 0
    BRANCH_ORANGE = 1
    BRANCH_GREEN = 2

    def __init__(self):
        self.header = None
        self.lights = [ [ False for dim1 in range(3) ] for dim0 in range(8) ]
        self.servos = [ 0 for dim0 in range(8) ]

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(forest_cmd._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == header.header._get_packed_fingerprint()
        self.header._encode_one(buf)
        for i0 in range(8):
            buf.write(struct.pack('>3b', *self.lights[i0][:3]))
        buf.write(struct.pack('>8i', *self.servos[:8]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != forest_cmd._get_packed_fingerprint():
            raise ValueError("Decode error")
        return forest_cmd._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = forest_cmd()
        self.header = header.header._decode_one(buf)
        self.lights = []
        for i0 in range(8):
            self.lights.append(struct.unpack('>3b', buf.read(3)))
        self.servos = struct.unpack('>8i', buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if forest_cmd in parents: return 0
        newparents = parents + [forest_cmd]
        tmphash = (0x3a668b0764040a01+ header.header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if forest_cmd._packed_fingerprint is None:
            forest_cmd._packed_fingerprint = struct.pack(">Q", forest_cmd._get_hash_recursive([]))
        return forest_cmd._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

