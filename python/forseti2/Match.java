/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package forseti2;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Match implements lcm.lcm.LCMEncodable
{
    public int match_number;
    public int team_numbers[];
    public String team_names[];
    public String gold_items_loc;
    public String blue_items_loc;
 
    public Match()
    {
        team_numbers = new int[4];
        team_names = new String[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0a8744135cba8418L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(forseti2.Match.class))
            return 0L;
 
        classes.add(forseti2.Match.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.match_number); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeInt(this.team_numbers[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            __strbuf = new char[this.team_names[a].length()]; this.team_names[a].getChars(0, this.team_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        __strbuf = new char[this.gold_items_loc.length()]; this.gold_items_loc.getChars(0, this.gold_items_loc.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.blue_items_loc.length()]; this.blue_items_loc.getChars(0, this.blue_items_loc.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public Match(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Match(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static forseti2.Match _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        forseti2.Match o = new forseti2.Match();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.match_number = ins.readInt();
 
        this.team_numbers = new int[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.team_numbers[a] = ins.readInt();
        }
 
        this.team_names = new String[(int) 4];
        for (int a = 0; a < 4; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.team_names[a] = new String(__strbuf);
        }
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.gold_items_loc = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.blue_items_loc = new String(__strbuf);
 
    }
 
    public forseti2.Match copy()
    {
        forseti2.Match outobj = new forseti2.Match();
        outobj.match_number = this.match_number;
 
        outobj.team_numbers = new int[(int) 4];
        System.arraycopy(this.team_numbers, 0, outobj.team_numbers, 0, 4); 
        outobj.team_names = new String[(int) 4];
        System.arraycopy(this.team_names, 0, outobj.team_names, 0, 4); 
        outobj.gold_items_loc = this.gold_items_loc;
 
        outobj.blue_items_loc = this.blue_items_loc;
 
        return outobj;
    }
 
}

