"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class CommandData(object):
    __slots__ = ["command"]

    def __init__(self):
        self.command = ""

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(CommandData._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __command_encoded = self.command.encode('utf-8')
        buf.write(struct.pack('>I', len(__command_encoded)+1))
        buf.write(__command_encoded)
        buf.write("\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != CommandData._get_packed_fingerprint():
            raise ValueError("Decode error")
        return CommandData._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = CommandData()
        __command_len = struct.unpack('>I', buf.read(4))[0]
        self.command = buf.read(__command_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if CommandData in parents: return 0
        tmphash = (0x153a534d732730a8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if CommandData._packed_fingerprint is None:
            CommandData._packed_fingerprint = struct.pack(">Q", CommandData._get_hash_recursive([]))
        return CommandData._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

