/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package forseti2;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class health implements lcm.lcm.LCMEncodable
{
    public forseti2.header header;
    public double uptime;
 
    public health()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1a3dfbebd18a044eL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(forseti2.health.class))
            return 0L;
 
        classes.add(forseti2.health.class);
        long hash = LCM_FINGERPRINT_BASE
             + forseti2.header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        outs.writeDouble(this.uptime); 
 
    }
 
    public health(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public health(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static forseti2.health _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        forseti2.health o = new forseti2.health();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = forseti2.header._decodeRecursiveFactory(ins);
 
        this.uptime = ins.readDouble();
 
    }
 
    public forseti2.health copy()
    {
        forseti2.health outobj = new forseti2.health();
        outobj.header = this.header.copy();
 
        outobj.uptime = this.uptime;
 
        return outobj;
    }
 
}

