"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class Match(object):
    __slots__ = ["match_number", "team_numbers", "team_names", "gold_items_loc", "blue_items_loc"]

    def __init__(self):
        self.match_number = 0
        self.team_numbers = [ 0 for dim0 in range(4) ]
        self.team_names = [ "" for dim0 in range(4) ]
        self.gold_items_loc = ""
        self.blue_items_loc = ""

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(Match._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.match_number))
        buf.write(struct.pack('>4i', *self.team_numbers[:4]))
        for i0 in range(4):
            __team_names_encoded = self.team_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__team_names_encoded)+1))
            buf.write(__team_names_encoded)
            buf.write("\0")
        __gold_items_loc_encoded = self.gold_items_loc.encode('utf-8')
        buf.write(struct.pack('>I', len(__gold_items_loc_encoded)+1))
        buf.write(__gold_items_loc_encoded)
        buf.write("\0")
        __blue_items_loc_encoded = self.blue_items_loc.encode('utf-8')
        buf.write(struct.pack('>I', len(__blue_items_loc_encoded)+1))
        buf.write(__blue_items_loc_encoded)
        buf.write("\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != Match._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Match._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Match()
        self.match_number = struct.unpack(">i", buf.read(4))[0]
        self.team_numbers = struct.unpack('>4i', buf.read(16))
        self.team_names = []
        for i0 in range(4):
            __team_names_len = struct.unpack('>I', buf.read(4))[0]
            self.team_names.append(buf.read(__team_names_len)[:-1].decode('utf-8', 'replace'))
        __gold_items_loc_len = struct.unpack('>I', buf.read(4))[0]
        self.gold_items_loc = buf.read(__gold_items_loc_len)[:-1].decode('utf-8', 'replace')
        __blue_items_loc_len = struct.unpack('>I', buf.read(4))[0]
        self.blue_items_loc = buf.read(__blue_items_loc_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Match in parents: return 0
        tmphash = (0xa8744135cba8418) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Match._packed_fingerprint is None:
            Match._packed_fingerprint = struct.pack(">Q", Match._get_hash_recursive([]))
        return Match._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

