/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package forseti2;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Time implements lcm.lcm.LCMEncodable
{
    public int game_time_so_far;
    public int stage_time_so_far;
    public int total_stage_time;
    public String stage_name;
 
    public Time()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x635b8c3e2e12db04L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(forseti2.Time.class))
            return 0L;
 
        classes.add(forseti2.Time.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.game_time_so_far); 
 
        outs.writeInt(this.stage_time_so_far); 
 
        outs.writeInt(this.total_stage_time); 
 
        __strbuf = new char[this.stage_name.length()]; this.stage_name.getChars(0, this.stage_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public Time(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Time(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static forseti2.Time _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        forseti2.Time o = new forseti2.Time();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.game_time_so_far = ins.readInt();
 
        this.stage_time_so_far = ins.readInt();
 
        this.total_stage_time = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.stage_name = new String(__strbuf);
 
    }
 
    public forseti2.Time copy()
    {
        forseti2.Time outobj = new forseti2.Time();
        outobj.game_time_so_far = this.game_time_so_far;
 
        outobj.stage_time_so_far = this.stage_time_so_far;
 
        outobj.total_stage_time = this.total_stage_time;
 
        outobj.stage_name = this.stage_name;
 
        return outobj;
    }
 
}

