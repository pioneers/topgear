/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace forseti2
{
    public sealed class xbox_joystick_state : LCM.LCM.LCMEncodable
    {
        public forseti2.header header;
        public float[] axes;
        public bool[] buttons;
 
        public xbox_joystick_state()
        {
            axes = new float[6];
            buttons = new bool[11];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xde0322355bddf3cbL;
 
        public const int A = 0;
        public const int B = 1;
        public const int X = 2;
        public const int Y = 3;
        public const int LB = 4;
        public const int RB = 5;
        public const int BACK = 6;
        public const int START = 7;
        public const int GUIDE = 8;
        public const int LSTICK = 9;
        public const int RSTICK = 10;

        static xbox_joystick_state()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("forseti2.xbox_joystick_state"))
                return 0L;
 
            classes.Add("forseti2.xbox_joystick_state");
            ulong hash = LCM_FINGERPRINT_BASE
                 + forseti2.header._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.axes[a]); 
            }
 
            for (int a = 0; a < 11; a++) {
                outs.Write(this.buttons[a]); 
            }
 
        }
 
        public xbox_joystick_state(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public xbox_joystick_state(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static forseti2.xbox_joystick_state _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            forseti2.xbox_joystick_state o = new forseti2.xbox_joystick_state();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = forseti2.header._decodeRecursiveFactory(ins);
 
            this.axes = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.axes[a] = ins.ReadSingle();
            }
 
            this.buttons = new bool[(int) 11];
            for (int a = 0; a < 11; a++) {
                this.buttons[a] = ins.ReadBoolean();
            }
 
        }
 
        public forseti2.xbox_joystick_state Copy()
        {
            forseti2.xbox_joystick_state outobj = new forseti2.xbox_joystick_state();
            outobj.header = this.header.Copy();
 
            outobj.axes = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.axes[a] = this.axes[a];
            }
 
            outobj.buttons = new bool[(int) 11];
            for (int a = 0; a < 11; a++) {
                outobj.buttons[a] = this.buttons[a];
            }
 
            return outobj;
        }
    }
}

